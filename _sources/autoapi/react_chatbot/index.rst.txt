react_chatbot
=============

.. py:module:: react_chatbot

.. autoapi-nested-parse::

   This module implements a Telegram bot for managing user contacts, verifications, and alerts.
   It provides various commands and message handlers to interact with users and manage their data.



Attributes
----------

.. autoapisummary::

   react_chatbot.bot


Functions
---------

.. autoapisummary::

   react_chatbot.debug_logger
   react_chatbot.sub_debug_logger
   react_chatbot.send_hope_message
   react_chatbot.notif_pairing_invitation
   react_chatbot.process_contacts
   react_chatbot.process_verifications
   react_chatbot.extract_bugreport
   react_chatbot.process_alarm
   react_chatbot.extract_fastcheck
   react_chatbot.state_dispatcher
   react_chatbot.handle_messages
   react_chatbot.error
   react_chatbot.manual_help
   react_chatbot.manual_undohelp
   react_chatbot.button
   react_chatbot.run_api


Module Contents
---------------

.. py:data:: bot

.. py:function:: debug_logger(func)

.. py:function:: sub_debug_logger(func)

.. py:function:: send_hope_message(update: telegram.Update) -> None
   :async:


   Send a message indicating that the alert status has been reset.


.. py:function:: notif_pairing_invitation(update: telegram.Update, notif_details: list) -> None
   :async:


   Send notification to users about a pairing invitation.

   :param update: The update object from Telegram.
   :type update: Update
   :param notif_details: List of notification details.
   :type notif_details: list


.. py:function:: process_contacts(update: telegram.Update, content: str, action: str) -> None
   :async:


   Process adding or deleting contacts.

   :param update: The update object from Telegram.
   :type update: Update
   :param content: The message content containing contact information.
   :type content: str
   :param action: The action to perform ('add' or 'del').
   :type action: str


.. py:function:: process_verifications(update: telegram.Update, content: str, action: str) -> None
   :async:


   Process adding or deleting verifications.

   :param update: The update object from Telegram.
   :type update: Update
   :param content: The message content containing verification information.
   :type content: str
   :param action: The action to perform ('add' or 'del').
   :type action: str


.. py:function:: extract_bugreport(update: telegram.Update, content: str) -> None
   :async:


   Extract and save a bug report.

   :param update: The update object from Telegram.
   :type update: Update
   :param content: The bug report content.
   :type content: str


.. py:function:: process_alarm(update: telegram.Update, content: str, action: str) -> None
   :async:


   Process skipping or undoing skip for alarms.

   :param update: The update object from Telegram.
   :type update: Update
   :param content: The message content containing alarm information.
   :type content: str
   :param action: The action to perform ('skip' or 'undoskip').
   :type action: str


.. py:function:: extract_fastcheck(update: telegram.Update, content: str) -> telegram.Message
   :async:


   Extract and process a fast check request.

   :param update: The update object from Telegram.
   :type update: Update
   :param content: The message content containing fast check information.
   :type content: str


.. py:function:: state_dispatcher(update: telegram.Update, state: str, message_body: str) -> None
   :async:


   Dispatch the appropriate function based on the current state.

   :param update: The update object from Telegram.
   :type update: Update
   :param state: The current state of the conversation.
   :type state: str
   :param message_body: The message content.
   :type message_body: str


.. py:function:: handle_messages(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE, **kwargs) -> telegram.Message | None
   :async:


   Handle incoming messages and route them to the appropriate function.

   :param update: The update object from Telegram.
   :type update: Update
   :param context: The context object for the handler.
   :type context: ContextTypes.DEFAULT_TYPE


.. py:function:: error(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE) -> None
   :async:


   Log errors caused by updates.


.. py:function:: manual_help(user_id: int, username: str) -> None
   :async:


   Send a manual help alert to user's contacts.

   :param user_id: The user's ID.
   :type user_id: int
   :param username: The user's username.
   :type username: str


.. py:function:: manual_undohelp(user_id: int, username: str) -> None
   :async:


   Send a manual undo help alert to user's contacts.

   :param user_id: The user's ID.
   :type user_id: int
   :param username: The user's username.
   :type username: str


.. py:function:: button(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE) -> telegram.Message | bool
   :async:


   Handle button callback queries.

   :param update: The update object from Telegram.
   :type update: Update
   :param context: The context object for the handler.
   :type context: ContextTypes.DEFAULT_TYPE


.. py:function:: run_api()

   Initialize and run the Telegram bot.


